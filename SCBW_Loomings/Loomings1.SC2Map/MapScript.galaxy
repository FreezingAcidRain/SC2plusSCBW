//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Strongarm
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "Lib1926661B"
include "aiABDDC5AA"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    lib1926661B_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_USER = 2;
const int gv_pLAYER_03_CERBERUS = 3;
const int gv_pLAYER_04_SONSOFKORHAL = 4;
const int gv_pLAYER_05_ZERG = 5;
const int gv_pLAYER_06_RESCUABLE = 6;

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_WaveSize_Small = 0;
const int ge_WaveSize_Medium = 1;
const int ge_WaveSize_Large = 2;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
unit gv_heroUnit;
bool gv_gameOver;
bool gv_inCinematic;
string gv_mapMusicTrack;
timer gv_zergTimer;
int gv_objectiveDestroy;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit gv_mid_CerberusDropship1;
unit gv_mid_CerberusDropship2;

void InitGlobals () {
    gv_zergTimer = TimerCreate();
    gv_objectiveDestroy = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_SendZergWave (int lp_waveSize, region lp_spawnArea);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_StartGameQ;
trigger gt_BaseExit;
trigger gt_DeadEnd;
trigger gt_RebelsApproach;
trigger gt_ZergStart;
trigger gt_ZergEnterBase;
trigger gt_ZergWaveDead;
trigger gt_DustStorm;
trigger gt_DustStormSand;
trigger gt_DefeatBaseDead;
trigger gt_VictoyEnemyBaseDead;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_TipSampleTipQ;
trigger gt_StartAI;
trigger gt_ZergAIWaves;
trigger gt_ZergAIChase;
trigger gt_AISoKRetaliate;
trigger gt_AISoKProgression;
trigger gt_AIGiveMinerals;
trigger gt_AIGiveGas;
trigger gt_ObjectiveDestroyCreate;
trigger gt_ObjectiveDestroyComplete;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_MidLanding;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "aiABDDC5AA") { aiABDDC5AA_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiABDDC5AA") { aiABDDC5AA_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiABDDC5AA") { return aiABDDC5AA_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiABDDC5AA") { return aiABDDC5AA_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiABDDC5AA") { aiABDDC5AA_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiABDDC5AA") { aiABDDC5AA_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiABDDC5AA") { aiABDDC5AA_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiABDDC5AA") { aiABDDC5AA_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiABDDC5AA") { aiABDDC5AA_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiABDDC5AA") { return aiABDDC5AA_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiABDDC5AA") { return aiABDDC5AA_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiABDDC5AA") { return aiABDDC5AA_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("aiABDDC5AA", 4);
    AICampaignStart(3);
    AICampaignStart(5);
    AICampaignStart(6);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(4, target);
}

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_SendZergWave (int lp_waveSize, region lp_spawnArea) {
    // Variable Declarations
    unitgroup lv_waveGroup;

    // Automatic Variable Declarations
    int auto3036C1FD_val;
    unitgroup autoD0098883_g;
    int autoD0098883_u;
    unit autoD0098883_var;

    // Variable Initialization
    lv_waveGroup = UnitGroupEmpty();

    // Implementation
    auto3036C1FD_val = lp_waveSize;
    if (auto3036C1FD_val == ge_WaveSize_Small) {
        UnitCreate(RandomInt(2, 4), "ZerglingBurrowed", 0, gv_pLAYER_05_ZERG, RegionRandomPoint(lp_spawnArea), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(lv_waveGroup, UnitLastCreatedGroup());
    }
    else if (auto3036C1FD_val == ge_WaveSize_Medium) {
        UnitCreate(RandomInt(3, 7), "ZerglingBurrowed", 0, gv_pLAYER_05_ZERG, RegionRandomPoint(lp_spawnArea), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(lv_waveGroup, UnitLastCreatedGroup());
        UnitCreate(RandomInt(1, 2), "HydraliskBurrowed", 0, gv_pLAYER_05_ZERG, RegionRandomPoint(lp_spawnArea), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(lv_waveGroup, UnitLastCreatedGroup());
    }
    else if (auto3036C1FD_val == ge_WaveSize_Large) {
        UnitCreate(RandomInt(4, 9), "ZerglingBurrowed", 0, gv_pLAYER_05_ZERG, RegionRandomPoint(lp_spawnArea), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(lv_waveGroup, UnitLastCreatedGroup());
        UnitCreate(RandomInt(0, 3), "HydraliskBurrowed", 0, gv_pLAYER_05_ZERG, RegionRandomPoint(lp_spawnArea), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(lv_waveGroup, UnitLastCreatedGroup());
    }
    else {
    }
    UnitGroupIssueOrder(lv_waveGroup, Order(AbilityCommand("ZerglingSCBW@BurrowUp", 0)), c_orderQueueReplace);
    UnitGroupIssueOrder(lv_waveGroup, Order(AbilityCommand("HydraliskSCBW@BurrowUp", 0)), c_orderQueueReplace);
    Wait(2.2, c_timeGame);
    autoD0098883_g = UnitGroup(null, gv_pLAYER_05_ZERG, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD0098883_u = UnitGroupCount(autoD0098883_g, c_unitCountAll);
    for (;; autoD0098883_u -= 1) {
        autoD0098883_var = UnitGroupUnitFromEnd(autoD0098883_g, autoD0098883_u);
        if (autoD0098883_var == null) { break; }
        UnitGroupIssueOrder(lv_waveGroup, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(775654609)), c_orderQueueReplace);
        UnitGroupIssueOrder(lv_waveGroup, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(819192723)), c_orderQueueAddToEnd);
        UnitGroupIssueOrder(lv_waveGroup, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(742529627)), c_orderQueueAddToEnd);
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1926661B_gf_ULoadCampaignData("LT01");
    TriggerExecute(gt_Init01Technology, true, true);
    TriggerExecute(gt_Init02Players, true, true);
    TriggerExecute(gt_Init03Units, true, true);
    TriggerExecute(gt_Init04MusicSound, true, true);
    TriggerExecute(gt_Init05Environment, true, true);
    TriggerExecute(gt_Init06Difficulties, true, true);
    TriggerExecute(gt_Init07Help, true, true);
    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGameQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeRestrictionsEnable(gv_pLAYER_01_USER, true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("SCVSCBW@Build", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("SCVSCBW@Build", 1), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("SCVSCBW@Build", 7), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("SCVSCBW@Build", 2), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("SCVSCBW@Build", 4), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("SCVSCBW@Build", 3), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("SCVSCBW@Build", 8), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("SCVSCBW@BuildAdv", 10), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("CommandCenterSCBW@Train", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("BarracksSCBW@Train", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("BarracksSCBW@Train", 1), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("BarracksSCBW@Train", 3), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("FactorySCBW@Train", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("TerranInfantryArmorsSCBW", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("TerranInfantryWeaponsSCBW", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MarineSCBWRangeUpgrade", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("StimpackSCBWResearch", 0), true);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MedicSCBWRestoration", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("MedicSCBWOpticFlare", 0), false);
    TechTreeAbilityAllow(gv_pLAYER_01_USER, AbilityCommand("VulturePlaceSpiderMineSCBW", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_USER, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_CERBERUS, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_SONSOFKORHAL, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_ZERG, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_04_SONSOFKORHAL, gv_pLAYER_05_ZERG, libNtve_ge_AllianceSetting_Enemy);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 250);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(gv_pLAYER_04_SONSOFKORHAL, c_playerPropMinerals, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_04_SONSOFKORHAL, c_playerPropVespene, c_playerPropOperSetTo, 5000);
    PlayerModifyPropertyInt(gv_pLAYER_04_SONSOFKORHAL, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 200);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "Music_TerrLow_SCI";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameTimeOfDaySet("08:00:00");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionPlayableMap(), "DustStorms");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Q
//--------------------------------------------------------------------------------------------------
bool gt_StartGameQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionPlayableMap(), gv_pLAYER_01_USER);
    TriggerExecute(gt_StartAI, true, false);
    TriggerQueueEnter();
    TriggerExecute(gt_ObjectiveDestroyCreate, true, true);
    TriggerQueueExit();
    TimerStart(gv_zergTimer, 120.0, false, c_timeGame);
    Wait((5.5 * 60.0), c_timeGame);
    TriggerExecute(gt_DustStorm, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGameQ_Init () {
    gt_StartGameQ = TriggerCreate("gt_StartGameQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base Exit
//--------------------------------------------------------------------------------------------------
bool gt_BaseExit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_marine;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_marine = UnitGroupRandomUnit(UnitGroup("MarineSCBW", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    TriggerQueueEnter();
    lib1926661B_gf_SendTransmissionKL(true, libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "LT01Miss|Line00001", null, true, lv_marine, false);
    lib1926661B_gf_SendTransmissionKL(true, libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "LT01Miss|Line00002", null, true, lv_marine, false);
    lib1926661B_gf_SendTransmissionKL(true, libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "LT01Miss|Line00003", null, true, lv_marine, false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Attack", true);
    lib1926661B_gf_SendTransmissionKL(true, libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "LT01Miss|Line00004", null, true, lv_marine, false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Attack", false);
    lib1926661B_gf_SendTransmissionKL(true, libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "LT01Miss|Line00005", null, true, lv_marine, false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Move", true);
    lib1926661B_gf_SendTransmissionKL(true, libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "LT01Miss|Line00006", null, true, lv_marine, false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "Move", false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaseExit_Init () {
    gt_BaseExit = TriggerCreate("gt_BaseExit_Func");
    TriggerAddEventUnitRegion(gt_BaseExit, null, RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dead End
//--------------------------------------------------------------------------------------------------
bool gt_DeadEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    lib1926661B_gf_SendTransmissionKL(true, c_invalidPortraitId, "EP01M08|Line00001", null, true, null, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeadEnd_Init () {
    gt_DeadEnd = TriggerCreate("gt_DeadEnd_Func");
    TriggerAddEventUnitRegion(gt_DeadEnd, null, RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rebels Approach
//--------------------------------------------------------------------------------------------------
bool gt_RebelsApproach_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_marine;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ZergStart, false);
    gf_SendZergWave(ge_WaveSize_Large, RegionFromId(3));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RebelsApproach_Init () {
    gt_RebelsApproach = TriggerCreate("gt_RebelsApproach_Func");
    TriggerAddEventUnitRegion(gt_RebelsApproach, null, RegionFromId(1), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Start
//--------------------------------------------------------------------------------------------------
bool gt_ZergStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_marine;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_RebelsApproach, false);
    gf_SendZergWave(ge_WaveSize_Small, RegionFromId(3));
    TriggerEnable(gt_ZergAIChase, true);
    TriggerExecute(gt_ZergAIChase, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergStart_Init () {
    gt_ZergStart = TriggerCreate("gt_ZergStart_Func");
    TriggerAddEventTimer(gt_ZergStart, gv_zergTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg Enter Base
//--------------------------------------------------------------------------------------------------
bool gt_ZergEnterBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_marine;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_05_ZERG))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    lv_marine = UnitGroupRandomUnit(UnitGroup("MarineSCBW", gv_pLAYER_01_USER, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    TriggerQueueEnter();
    lib1926661B_gf_SendTransmissionKL(true, libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "LT01Miss|Line00007", null, true, lv_marine, false);
    lib1926661B_gf_SendTransmissionKL(true, libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "LT01Miss|Line00008", null, true, lv_marine, false);
    lib1926661B_gf_SendTransmissionKL(true, libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "LT01Miss|Line00009", null, true, null, false);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergEnterBase_Init () {
    gt_ZergEnterBase = TriggerCreate("gt_ZergEnterBase_Func");
    TriggerAddEventUnitRegion(gt_ZergEnterBase, null, RegionFromId(5), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZergWaveDead
//--------------------------------------------------------------------------------------------------
bool gt_ZergWaveDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDF4DB0FD_g;
    int autoDF4DB0FD_u;
    unit autoDF4DB0FD_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_05_ZERG))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_MidQ, true, true);
    autoDF4DB0FD_g = UnitGroup(null, gv_pLAYER_03_CERBERUS, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoDF4DB0FD_u = UnitGroupCount(autoDF4DB0FD_g, c_unitCountAll);
    for (;; autoDF4DB0FD_u -= 1) {
        autoDF4DB0FD_var = UnitGroupUnitFromEnd(autoDF4DB0FD_g, autoDF4DB0FD_u);
        if (autoDF4DB0FD_var == null) { break; }
        Wait(0.2, c_timeGame);
        libNtve_gf_RescueUnit(autoDF4DB0FD_var, gv_pLAYER_01_USER, false);
    }
    TriggerExecute(gt_ZergAIWaves, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergWaveDead_Init () {
    gt_ZergWaveDead = TriggerCreate("gt_ZergWaveDead_Func");
    TriggerAddEventUnitDied(gt_ZergWaveDead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dust Storm
//--------------------------------------------------------------------------------------------------
bool gt_DustStorm_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionPlayableMap(), "DustStorms");
    Wait(5.0, c_timeGame);
    GameSetLighting("EolianSandstorm", 45.0);
    TriggerEnable(gt_DustStormSand, true);
    TriggerExecute(gt_DustStormSand, true, false);
    Wait((4.5 * 60.0), c_timeGame);
    TriggerEnable(gt_DustStormSand, false);
    GameSetLighting("EolianDay", 45.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DustStorm_Init () {
    gt_DustStorm = TriggerCreate("gt_DustStorm_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dust Storm Sand
//--------------------------------------------------------------------------------------------------
bool gt_DustStormSand_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto749835E3_g;
    int auto749835E3_u;
    unit auto749835E3_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto749835E3_g = UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto749835E3_u = UnitGroupCount(auto749835E3_g, c_unitCountAll);
    for (;; auto749835E3_u -= 1) {
        auto749835E3_var = UnitGroupUnitFromEnd(auto749835E3_g, auto749835E3_u);
        if (auto749835E3_var == null) { break; }
        if ((UnitHasBehavior2(auto749835E3_var, "GlazeSandStructure") == false)) {
            UnitBehaviorAdd(auto749835E3_var, "GlazeSandStructure", auto749835E3_var, 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DustStormSand_Init () {
    gt_DustStormSand = TriggerCreate("gt_DustStormSand_Func");
    TriggerEnable(gt_DustStormSand, false);
    TriggerAddEventTimePeriodic(gt_DustStormSand, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    lib1926661B_gf_DisplayCampaignMessage(PlayerGroupAll(), lib1926661B_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/FAE26F8F"), lib1926661B_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(lib1926661B_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victoy Enemy Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_VictoyEnemyBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_04_SONSOFKORHAL, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyComplete, true, false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoyEnemyBaseDead_Init () {
    gt_VictoyEnemyBaseDead = TriggerCreate("gt_VictoyEnemyBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_VictoyEnemyBaseDead, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    Wait(2.0, c_timeReal);
    lib1926661B_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if (true) {
    }

    lib1926661B_gf_AddVictoryPanelStatistic("UnitsTotalCount");
    lib1926661B_gf_AddVictoryPanelStatistic("UnitsKilledCount");
    lib1926661B_gf_AddVictoryPanelStatistic("ResourceLostArmy");
    lib1926661B_gf_AddVictoryPanelStatistic("StructuresKilledCount");
    lib1926661B_gf_AddVictoryPanelStatistic("StructuresLostCount");
    lib1926661B_gf_AddVictoryPanelCustomStatistic("Days taken to Complete", (IntToString(2) + " Days"));
    lib1926661B_gf_AddVictoryPanelCustomStatistic("Unit Type with the Most Kills", ("Hellion (26 Days)" + " Days"));
    lib1926661B_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib1926661B_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Defeat, false);
    gv_gameOver = true;
    lib1926661B_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_VictoryCheat, false);
    TriggerEnable(gt_DefeatCheat, false);
    TriggerEnable(gt_Victory, false);
    gv_gameOver = true;
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip {Sample Tip} Q
//--------------------------------------------------------------------------------------------------
bool gt_TipSampleTipQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/A49CB740"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/9AC2AD0A"), StringExternal("Param/Value/04E93AA1"), "Assets\\Textures\\ui_tip_questionmark.dds");
    Wait(lib1926661B_gv_campaignTipDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipSampleTipQ_Init () {
    gt_TipSampleTipQ = TriggerCreate("gt_TipSampleTipQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    cai_runall();
    TriggerExecute(gt_AISoKProgression, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg AI Waves
//--------------------------------------------------------------------------------------------------
bool gt_ZergAIWaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_random;
    region lv_region;

    // Automatic Variable Declarations
    const int auto4DAA7E4A_n = 4;
    int auto4DAA7E4A_i;
    int autoE3E26417_val;
    const int auto9D084583_n = 3;
    int auto9D084583_i;
    int autoAD7D1DEB_val;
    const int auto8D349D06_n = 7;
    int auto8D349D06_i;
    int auto65856406_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto4DAA7E4A_i = 1; auto4DAA7E4A_i <= auto4DAA7E4A_n; auto4DAA7E4A_i += 1) {
        Wait(RandomFixed(20.0, 45.0), c_timeAI);
        lv_random = RandomInt(1, 2);
        autoE3E26417_val = lv_random;
        if (autoE3E26417_val == 1) {
            lv_region = RegionFromId(7);
        }
        else if (autoE3E26417_val == 2) {
            lv_region = RegionFromId(3);
        }
        else {
            lv_region = RegionFromId(7);
        }
        gf_SendZergWave(ge_WaveSize_Small, lv_region);
    }
    for (auto9D084583_i = 1; auto9D084583_i <= auto9D084583_n; auto9D084583_i += 1) {
        Wait(RandomFixed(30.0, 60.0), c_timeAI);
        lv_random = RandomInt(1, 2);
        autoAD7D1DEB_val = lv_random;
        if (autoAD7D1DEB_val == 1) {
            lv_region = RegionFromId(7);
        }
        else if (autoAD7D1DEB_val == 2) {
            lv_region = RegionFromId(3);
        }
        else {
            lv_region = RegionFromId(7);
        }
        gf_SendZergWave(ge_WaveSize_Medium, lv_region);
    }
    for (auto8D349D06_i = 1; auto8D349D06_i <= auto8D349D06_n; auto8D349D06_i += 1) {
        Wait(RandomFixed(35.0, 90.0), c_timeAI);
        lv_random = RandomInt(1, 2);
        auto65856406_val = lv_random;
        if (auto65856406_val == 1) {
            lv_region = RegionFromId(7);
        }
        else if (auto65856406_val == 2) {
            lv_region = RegionFromId(3);
        }
        else {
            lv_region = RegionFromId(7);
        }
        gf_SendZergWave(ge_WaveSize_Large, lv_region);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAIWaves_Init () {
    gt_ZergAIWaves = TriggerCreate("gt_ZergAIWaves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zerg AI Chase
//--------------------------------------------------------------------------------------------------
bool gt_ZergAIChase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE1453B40_g;
    int autoE1453B40_u;
    unit autoE1453B40_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE1453B40_g = UnitGroup(null, gv_pLAYER_05_ZERG, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE1453B40_u = UnitGroupCount(autoE1453B40_g, c_unitCountAll);
    for (;; autoE1453B40_u -= 1) {
        autoE1453B40_var = UnitGroupUnitFromEnd(autoE1453B40_g, autoE1453B40_u);
        if (autoE1453B40_var == null) { break; }
        UnitIssueOrder(autoE1453B40_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, gv_pLAYER_05_ZERG, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZergAIChase_Init () {
    gt_ZergAIChase = TriggerCreate("gt_ZergAIChase_Func");
    TriggerEnable(gt_ZergAIChase, false);
    TriggerAddEventTimePeriodic(gt_ZergAIChase, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI SoK Retaliate
//--------------------------------------------------------------------------------------------------
bool gt_AISoKRetaliate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attackedUnit;
    unit lv_attackerUnit;

    // Automatic Variable Declarations
    unitgroup auto8F8877F5_g;
    int auto8F8877F5_u;
    unit auto8F8877F5_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_inCinematic == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_04_SONSOFKORHAL))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_attackedUnit = EventUnit();
    lv_attackerUnit = EventUnitTarget();
    auto8F8877F5_g = UnitGroup(null, gv_pLAYER_04_SONSOFKORHAL, RegionCircle(UnitGetPosition(lv_attackedUnit), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8F8877F5_u = UnitGroupCount(auto8F8877F5_g, c_unitCountAll);
    for (;; auto8F8877F5_u -= 1) {
        auto8F8877F5_var = UnitGroupUnitFromEnd(auto8F8877F5_g, auto8F8877F5_u);
        if (auto8F8877F5_var == null) { break; }
        libNtve_gf_AICast(auto8F8877F5_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_attackerUnit)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISoKRetaliate_Init () {
    gt_AISoKRetaliate = TriggerCreate("gt_AISoKRetaliate_Func");
    TriggerAddEventUnitAttacked2(gt_AISoKRetaliate, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI SoK Progression
//--------------------------------------------------------------------------------------------------
bool gt_AISoKProgression_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_workerSCV;
    unit lv_buildingUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_workerSCV = UnitGroupRandomUnit(UnitGroup("SCVSCBW", gv_pLAYER_04_SONSOFKORHAL, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    libNtve_gf_AICast(lv_workerSCV, OrderTargetingPoint(AbilityCommand("SCVSCBW@Build", 1), PointFromId(1213716410)));
    Wait(40.0, c_timeAI);
    libNtve_gf_AICast(UnitFromId(1315373299), Order(AbilityCommand("CommandCenterSCBW@Train", 0)));
    Wait(25.0, c_timeAI);
    lv_workerSCV = UnitGroupRandomUnit(UnitGroup("SCVSCBW", gv_pLAYER_04_SONSOFKORHAL, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    libNtve_gf_AICast(lv_workerSCV, OrderTargetingPoint(AbilityCommand("SCVSCBW@Build", 1), PointFromId(435604196)));
    Wait(15.0, c_timeAI);
    libNtve_gf_AICast(UnitFromId(1315373299), Order(AbilityCommand("CommandCenterSCBW@Train", 0)));
    lv_buildingUnit = UnitGroupRandomUnit(UnitGroup("EngineeringBaySCBW", gv_pLAYER_04_SONSOFKORHAL, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    libNtve_gf_AICast(lv_buildingUnit, Order(AbilityCommand("TerranInfantryWeaponsSCBW", 0)));
    Wait(30.0, c_timeAI);
    lv_workerSCV = UnitGroupRandomUnit(UnitGroup("SCVSCBW", gv_pLAYER_04_SONSOFKORHAL, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    libNtve_gf_AICast(lv_workerSCV, OrderTargetingPoint(AbilityCommand("SCVSCBW@BuildAdv", 10), PointFromId(1604418837)));
    Wait(45.0, c_timeAI);
    lv_buildingUnit = UnitGroupRandomUnit(UnitGroup("AcademySCBW", gv_pLAYER_04_SONSOFKORHAL, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    libNtve_gf_AICast(lv_buildingUnit, Order(AbilityCommand("MarineSCBWRangeUpgrade", 0)));
    lv_workerSCV = UnitGroupRandomUnit(UnitGroup("SCVSCBW", gv_pLAYER_04_SONSOFKORHAL, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    libNtve_gf_AICast(lv_workerSCV, OrderTargetingPoint(AbilityCommand("SCVSCBW@Build", 3), PointFromId(1633811412)));
    Wait(30.0, c_timeAI);
    lv_buildingUnit = UnitGroupRandomUnit(UnitGroup("EngineeringBaySCBW", gv_pLAYER_04_SONSOFKORHAL, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    libNtve_gf_AICast(lv_buildingUnit, Order(AbilityCommand("TerranInfantryArmorsSCBW", 0)));
    Wait(60.0, c_timeAI);
    lv_buildingUnit = UnitGroupRandomUnit(UnitGroup("FactorySCBW", gv_pLAYER_04_SONSOFKORHAL, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    libNtve_gf_AICast(lv_buildingUnit, OrderTargetingPoint(AbilityCommand("FactorySCBW@AddOns", 0), UnitGetPosition(lv_buildingUnit)));
    Wait(20.0, c_timeAI);
    lv_workerSCV = UnitGroupRandomUnit(UnitGroup("SCVSCBW", gv_pLAYER_04_SONSOFKORHAL, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    libNtve_gf_AICast(lv_workerSCV, OrderTargetingPoint(AbilityCommand("SCVSCBW@Build", 1), PointFromId(347009323)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AISoKProgression_Init () {
    gt_AISoKProgression = TriggerCreate("gt_AISoKProgression_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Minerals
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveMinerals_Init () {
    gt_AIGiveMinerals = TriggerCreate("gt_AIGiveMinerals_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveMinerals, gv_pLAYER_04_SONSOFKORHAL, c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Give Gas
//--------------------------------------------------------------------------------------------------
bool gt_AIGiveGas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIGiveGas_Init () {
    gt_AIGiveGas = TriggerCreate("gt_AIGiveGas_Func");
    TriggerAddEventPlayerPropChange(gt_AIGiveGas, gv_pLAYER_04_SONSOFKORHAL, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib1926661B_gf_CreateObjectiveCampaign("M01Primary01");
    gv_objectiveDestroy = ObjectiveLastCreated();
    Wait(lib1926661B_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyCreate_Init () {
    gt_ObjectiveDestroyCreate = TriggerCreate("gt_ObjectiveDestroyCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Destroy Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveDestroyComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveDestroyCreate, true, false);
    lib1926661B_gf_SetObjectiveStateCampaign("M01Primary01", lib1926661B_ge_MissionObjectiveState_Completed);
    Wait(lib1926661B_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveDestroyComplete_Init () {
    gt_ObjectiveDestroyComplete = TriggerCreate("gt_ObjectiveDestroyComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7B75EFEC_g;
    int auto7B75EFEC_u;
    unit auto7B75EFEC_var;
    unitgroup autoBFE65D72_g;
    int autoBFE65D72_u;
    unit autoBFE65D72_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    gv_inCinematic = true;
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    auto7B75EFEC_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto7B75EFEC_u = UnitGroupCount(auto7B75EFEC_g, c_unitCountAll);
    for (;; auto7B75EFEC_u -= 1) {
        auto7B75EFEC_var = UnitGroupUnitFromEnd(auto7B75EFEC_g, auto7B75EFEC_u);
        if (auto7B75EFEC_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto7B75EFEC_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto7B75EFEC_var);
            libNtve_gf_PauseUnit(auto7B75EFEC_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    autoBFE65D72_g = gv_cinematicHiddenUnits;
    autoBFE65D72_u = UnitGroupCount(autoBFE65D72_g, c_unitCountAll);
    for (;; autoBFE65D72_u -= 1) {
        autoBFE65D72_var = UnitGroupUnitFromEnd(autoBFE65D72_g, autoBFE65D72_u);
        if (autoBFE65D72_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoBFE65D72_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    lib1926661B_gf_SendTransmissionKL(true, c_invalidPortraitId, "EP01M08|Line00001", null, true, null, false);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto72381335_g;
    int auto72381335_u;
    unit auto72381335_var;
    unitgroup auto21B863C3_g;
    int auto21B863C3_u;
    unit auto21B863C3_var;
    unitgroup auto9558E725_g;
    int auto9558E725_u;
    unit auto9558E725_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto72381335_g = gv_cinematicTempUnits;
    auto72381335_u = UnitGroupCount(auto72381335_g, c_unitCountAll);
    for (;; auto72381335_u -= 1) {
        auto72381335_var = UnitGroupUnitFromEnd(auto72381335_g, auto72381335_u);
        if (auto72381335_var == null) { break; }
        UnitRemove(auto72381335_var);
    }
    auto21B863C3_g = gv_cinematicHiddenUnits;
    auto21B863C3_u = UnitGroupCount(auto21B863C3_g, c_unitCountAll);
    for (;; auto21B863C3_u -= 1) {
        auto21B863C3_var = UnitGroupUnitFromEnd(auto21B863C3_g, auto21B863C3_u);
        if (auto21B863C3_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto21B863C3_var, true);
    }
    auto9558E725_g = gv_cinematicPausedUnits;
    auto9558E725_u = UnitGroupCount(auto9558E725_g, c_unitCountAll);
    for (;; auto9558E725_u -= 1) {
        auto9558E725_var = UnitGroupUnitFromEnd(auto9558E725_g, auto9558E725_u);
        if (auto9558E725_var == null) { break; }
        libNtve_gf_PauseUnit(auto9558E725_var, false);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), lv_fadeDuration);
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Landing
//--------------------------------------------------------------------------------------------------
bool gt_MidLanding_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_03_CERBERUS))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventUnit() == gv_mid_CerberusDropship1) || (EventUnit() == gv_mid_CerberusDropship2))) {
        UnitIssueOrder(EventUnitCargo(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(6))), c_orderQueueReplace);
        UnitGroupAdd(gv_cinematicTempUnits, EventUnitCargo());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidLanding_Init () {
    gt_MidLanding = TriggerCreate("gt_MidLanding_Func");
    TriggerAddEventUnitCargo(gt_MidLanding, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto493AA4A1_g;
    int auto493AA4A1_u;
    unit auto493AA4A1_var;
    unitgroup autoA207037B_g;
    int autoA207037B_u;
    unit autoA207037B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    auto493AA4A1_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto493AA4A1_u = UnitGroupCount(auto493AA4A1_g, c_unitCountAll);
    for (;; auto493AA4A1_u -= 1) {
        auto493AA4A1_var = UnitGroupUnitFromEnd(auto493AA4A1_g, auto493AA4A1_u);
        if (auto493AA4A1_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto493AA4A1_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto493AA4A1_var);
            libNtve_gf_PauseUnit(auto493AA4A1_var, true);
        }

    }
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    autoA207037B_g = gv_cinematicHiddenUnits;
    autoA207037B_u = UnitGroupCount(autoA207037B_g, c_unitCountAll);
    for (;; autoA207037B_u -= 1) {
        autoA207037B_var = UnitGroupUnitFromEnd(autoA207037B_g, autoA207037B_u);
        if (autoA207037B_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoA207037B_var, false);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "DropshipSCBW", 0, gv_pLAYER_03_CERBERUS, PointFromId(1283647810));
    gv_mid_CerberusDropship1 = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitCargoCreate(UnitLastCreated(), "GoliathSCBW", 2);
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
    libNtve_gf_CreateUnitsAtPoint2(1, "DropshipSCBW", 0, gv_pLAYER_03_CERBERUS, PointFromId(1283647810));
    gv_mid_CerberusDropship2 = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitCargoCreate(UnitLastCreated(), "FirebatSCBW", 4);
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(539567301), 0.0, -1, 10, true);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(1829649836), 20.0, -1, 10, true);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(gv_mid_CerberusDropship1, OrderTargetingPoint(AbilityCommand("DropshipSCBW@Transport", 2), PointFromId(1729253283)), c_orderQueueReplace);
    UnitIssueOrder(gv_mid_CerberusDropship1, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(95764016)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_mid_CerberusDropship2, OrderTargetingPoint(AbilityCommand("DropshipSCBW@Transport", 2), PointFromId(1742810667)), c_orderQueueReplace);
    UnitIssueOrder(gv_mid_CerberusDropship2, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(95764016)), c_orderQueueAddToEnd);
    lib1926661B_gf_SendTransmissionKL(true, libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "LT01Miss|Line00010", null, true, null, false);
    lib1926661B_gf_SendTransmissionKL(true, libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "LT01Miss|Line00011", null, true, null, false);
    lib1926661B_gf_SendTransmissionKL(true, libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "LT01Miss|Line00012", null, true, null, false);
    lib1926661B_gf_SendTransmissionKL(true, libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "LT01Miss|Line00013", null, true, null, false);
    lib1926661B_gf_SendTransmissionKL(true, libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "LT01Miss|Line00014", null, false, null, false);
    TransmissionWait(TransmissionLastSent(), 0.5);
    lib1926661B_gf_SendTransmissionKL(true, libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "LT01Miss|Line00015", null, true, null, false);
    lib1926661B_gf_SendTransmissionKL(true, libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "LT01Miss|Line00016", null, true, null, false);
    lib1926661B_gf_SendTransmissionKL(true, libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "LT01Miss|Line00017", null, true, null, false);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    unitgroup auto55C13BEB_g;
    int auto55C13BEB_u;
    unit auto55C13BEB_var;
    unitgroup autoD237A562_g;
    int autoD237A562_u;
    unit autoD237A562_var;
    unitgroup autoD99C95D3_g;
    int autoD99C95D3_u;
    unit autoD99C95D3_var;
    unitgroup auto67EE2B4A_g;
    int auto67EE2B4A_u;
    unit auto67EE2B4A_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto55C13BEB_g = gv_cinematicTempUnits;
    auto55C13BEB_u = UnitGroupCount(auto55C13BEB_g, c_unitCountAll);
    for (;; auto55C13BEB_u -= 1) {
        auto55C13BEB_var = UnitGroupUnitFromEnd(auto55C13BEB_g, auto55C13BEB_u);
        if (auto55C13BEB_var == null) { break; }
        UnitRemove(auto55C13BEB_var);
    }
    autoD237A562_g = gv_cinematicHiddenUnits;
    autoD237A562_u = UnitGroupCount(autoD237A562_g, c_unitCountAll);
    for (;; autoD237A562_u -= 1) {
        autoD237A562_var = UnitGroupUnitFromEnd(autoD237A562_g, autoD237A562_u);
        if (autoD237A562_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoD237A562_var, true);
    }
    autoD99C95D3_g = gv_cinematicPausedUnits;
    autoD99C95D3_u = UnitGroupCount(autoD99C95D3_g, c_unitCountAll);
    for (;; autoD99C95D3_u -= 1) {
        autoD99C95D3_var = UnitGroupUnitFromEnd(autoD99C95D3_g, autoD99C95D3_u);
        if (autoD99C95D3_var == null) { break; }
        libNtve_gf_PauseUnit(autoD99C95D3_var, false);
    }
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    libNtve_gf_RestoreUnitSelection(gv_pLAYER_01_USER);
    CameraRestore(gv_pLAYER_01_USER, 0.0, -1, 10);
    CameraPan(gv_pLAYER_01_USER, RegionGetCenter(RegionFromId(8)), 0.0, -1, 10.0, false);
    auto67EE2B4A_g = UnitGroup(null, gv_pLAYER_03_CERBERUS, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto67EE2B4A_u = UnitGroupCount(auto67EE2B4A_g, c_unitCountAll);
    for (;; auto67EE2B4A_u -= 1) {
        auto67EE2B4A_var = UnitGroupUnitFromEnd(auto67EE2B4A_g, auto67EE2B4A_u);
        if (auto67EE2B4A_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto67EE2B4A_var, true);
    }
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), lv_fadeDuration);
    libNtve_gf_GlobalCinematicSetting(false);
    gv_inCinematic = false;
    CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto37B8C496_g;
    int auto37B8C496_u;
    unit auto37B8C496_var;
    unitgroup autoCB089074_g;
    int autoCB089074_u;
    unit autoCB089074_var;

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 1.0);
    Wait(1.0, c_timeReal);
    gv_inCinematic = true;
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    auto37B8C496_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto37B8C496_u = UnitGroupCount(auto37B8C496_g, c_unitCountAll);
    for (;; auto37B8C496_u -= 1) {
        auto37B8C496_var = UnitGroupUnitFromEnd(auto37B8C496_g, auto37B8C496_u);
        if (auto37B8C496_var == null) { break; }
        if ((libNtve_gf_UnitIsPaused(auto37B8C496_var) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, auto37B8C496_var);
            libNtve_gf_PauseUnit(auto37B8C496_var, true);
        }

    }
    AITimePause(true);
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    autoCB089074_g = gv_cinematicHiddenUnits;
    autoCB089074_u = UnitGroupCount(autoCB089074_g, c_unitCountAll);
    for (;; autoCB089074_u -= 1) {
        autoCB089074_var = UnitGroupUnitFromEnd(autoCB089074_g, autoCB089074_u);
        if (autoCB089074_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoCB089074_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    lib1926661B_gf_SendTransmissionKL(true, c_invalidPortraitId, "EP01M08|Line00001", null, true, null, false);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_StartGameQ_Init();
    gt_BaseExit_Init();
    gt_DeadEnd_Init();
    gt_RebelsApproach_Init();
    gt_ZergStart_Init();
    gt_ZergEnterBase_Init();
    gt_ZergWaveDead_Init();
    gt_DustStorm_Init();
    gt_DustStormSand_Init();
    gt_DefeatBaseDead_Init();
    gt_VictoyEnemyBaseDead_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_TipSampleTipQ_Init();
    gt_StartAI_Init();
    gt_ZergAIWaves_Init();
    gt_ZergAIChase_Init();
    gt_AISoKRetaliate_Init();
    gt_AISoKProgression_Init();
    gt_AIGiveMinerals_Init();
    gt_AIGiveGas_Init();
    gt_ObjectiveDestroyCreate_Init();
    gt_ObjectiveDestroyComplete_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_MidLanding_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
