//==================================================================================================
// 
// Generated AI Script
// 
// AI Name: Sons of Korhal
// 
//==================================================================================================
include "TriggerLibs/natives"
include "TriggerLibs/AI"
include "TriggerLibs/Computer"

//--------------------------------------------------------------------------------------------------
// Globals
//--------------------------------------------------------------------------------------------------
point[17] aiABDDC5AA_defGather;
string[17] aiABDDC5AA_customData;
wave[17] aiABDDC5AA_lastWave;

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiABDDC5AA_wave1_enabled;
wave[17] aiABDDC5AA_wave1_lastWave;
trigger aiABDDC5AA_wave1_trigger = null;
int aiABDDC5AA_wave1_runPlayer;
playergroup aiABDDC5AA_wave1_runTarget;

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave1_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiABDDC5AA_wave1_enabled[init_i] = true;
        aiABDDC5AA_wave1_lastWave[init_i] = null;
    }

    aiABDDC5AA_wave1_trigger = TriggerCreate("aiABDDC5AA_wave1_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave1_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiABDDC5AA_wave1_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiABDDC5AA_wave1_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiABDDC5AA_wave1_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiABDDC5AA_wave1_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiABDDC5AA_wave1_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiABDDC5AA_wave1_runFunc (bool c, bool a) {
    int p = aiABDDC5AA_wave1_runPlayer;
    playergroup target = aiABDDC5AA_wave1_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiABDDC5AA_wave1_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiABDDC5AA_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    if (d == 1) { tg = 20; }
    if (d == 2) { tg = 20; }
    if (d == 3) { tg = 20; }
    if (d == 4) { tg = 20; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(742529627));

    gatherPoint = aiABDDC5AA_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(7840713), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1782204384), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1026216847), false);
    AIAttackWaveAddWaypoint(p, PointFromId(523340354), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1130016232), false);
    AIAttackWaveAddWaypoint(p, PointFromId(763670744), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1931216631), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1106296665), false);
    AIAttackWaveAddWaypoint(p, PointFromId(775654609), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1616870696), false);
    AIAttackWaveAddWaypoint(p, PointFromId(819192723), false);
    AIAttackWaveAddWaypoint(p, PointFromId(216542348), false);

    AIAttackWaveAddUnits(2, 3, "MarineSCBW");
    AIAttackWaveAddUnits(3, 2, "MarineSCBW");
    AIAttackWaveAddUnits(4, 3, "MarineSCBW");
    AIAttackWaveAddUnits(5, 3, "MarineSCBW");

    AIAttackWaveSend(p, ts, false);
    aiABDDC5AA_wave1_lastWave[p] = WaveLastCreated();
    aiABDDC5AA_lastWave[p] = aiABDDC5AA_wave1_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave1_run (int p, playergroup target, bool wait) {
    aiABDDC5AA_wave1_runPlayer = p;
    aiABDDC5AA_wave1_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiABDDC5AA_wave1_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiABDDC5AA_wave2_enabled;
wave[17] aiABDDC5AA_wave2_lastWave;
trigger aiABDDC5AA_wave2_trigger = null;
int aiABDDC5AA_wave2_runPlayer;
playergroup aiABDDC5AA_wave2_runTarget;

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave2_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiABDDC5AA_wave2_enabled[init_i] = true;
        aiABDDC5AA_wave2_lastWave[init_i] = null;
    }

    aiABDDC5AA_wave2_trigger = TriggerCreate("aiABDDC5AA_wave2_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave2_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiABDDC5AA_wave2_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiABDDC5AA_wave2_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiABDDC5AA_wave2_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiABDDC5AA_wave2_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiABDDC5AA_wave2_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiABDDC5AA_wave2_runFunc (bool c, bool a) {
    int p = aiABDDC5AA_wave2_runPlayer;
    playergroup target = aiABDDC5AA_wave2_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiABDDC5AA_wave2_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiABDDC5AA_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    if (d == 1) { tg = 20; }
    if (d == 2) { tg = 20; }
    if (d == 3) { tg = 20; }
    if (d == 4) { tg = 20; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(742529627));

    gatherPoint = aiABDDC5AA_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(7840713), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1782204384), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1026216847), false);
    AIAttackWaveAddWaypoint(p, PointFromId(523340354), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1130016232), false);
    AIAttackWaveAddWaypoint(p, PointFromId(763670744), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1931216631), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1106296665), false);
    AIAttackWaveAddWaypoint(p, PointFromId(775654609), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1616870696), false);
    AIAttackWaveAddWaypoint(p, PointFromId(819192723), false);
    AIAttackWaveAddWaypoint(p, PointFromId(216542348), false);

    AIAttackWaveAddUnits(2, 2, "MarineSCBW");
    AIAttackWaveAddUnits(3, 2, "MarineSCBW");
    AIAttackWaveAddUnits(4, 2, "MarineSCBW");
    AIAttackWaveAddUnits(5, 2, "MarineSCBW");

    AIAttackWaveSend(p, ts, false);
    aiABDDC5AA_wave2_lastWave[p] = WaveLastCreated();
    aiABDDC5AA_lastWave[p] = aiABDDC5AA_wave2_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave2_run (int p, playergroup target, bool wait) {
    aiABDDC5AA_wave2_runPlayer = p;
    aiABDDC5AA_wave2_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiABDDC5AA_wave2_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiABDDC5AA_wave3_enabled;
wave[17] aiABDDC5AA_wave3_lastWave;
trigger aiABDDC5AA_wave3_trigger = null;
int aiABDDC5AA_wave3_runPlayer;
playergroup aiABDDC5AA_wave3_runTarget;

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave3_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiABDDC5AA_wave3_enabled[init_i] = true;
        aiABDDC5AA_wave3_lastWave[init_i] = null;
    }

    aiABDDC5AA_wave3_trigger = TriggerCreate("aiABDDC5AA_wave3_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave3_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiABDDC5AA_wave3_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiABDDC5AA_wave3_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiABDDC5AA_wave3_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiABDDC5AA_wave3_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiABDDC5AA_wave3_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiABDDC5AA_wave3_runFunc (bool c, bool a) {
    int p = aiABDDC5AA_wave3_runPlayer;
    playergroup target = aiABDDC5AA_wave3_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiABDDC5AA_wave3_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiABDDC5AA_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 125; }
    if (d == 2) { ta = 125; }
    if (d == 3) { ta = 125; }
    if (d == 4) { ta = 125; }
    tg = 0;
    if (d == 1) { tg = 20; }
    if (d == 2) { tg = 20; }
    if (d == 3) { tg = 20; }
    if (d == 4) { tg = 20; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(742529627));

    gatherPoint = aiABDDC5AA_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(7840713), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1782204384), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1026216847), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1650014953), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1611703428), false);
    AIAttackWaveAddWaypoint(p, PointFromId(151633690), false);
    AIAttackWaveAddWaypoint(p, PointFromId(759196783), false);
    AIAttackWaveAddWaypoint(p, PointFromId(2063379371), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1957756386), false);
    AIAttackWaveAddWaypoint(p, PointFromId(216542348), false);

    AIAttackWaveAddUnits(2, 3, "MarineSCBW");
    AIAttackWaveAddUnits(3, 2, "MarineSCBW");
    AIAttackWaveAddUnits(4, 3, "MarineSCBW");
    AIAttackWaveAddUnits(5, 3, "MarineSCBW");

    AIAttackWaveAddUnits(2, 2, "FirebatSCBW");
    AIAttackWaveAddUnits(3, 1, "FirebatSCBW");
    AIAttackWaveAddUnits(4, 2, "FirebatSCBW");
    AIAttackWaveAddUnits(5, 2, "FirebatSCBW");

    AIAttackWaveSend(p, ts, false);
    aiABDDC5AA_wave3_lastWave[p] = WaveLastCreated();
    aiABDDC5AA_lastWave[p] = aiABDDC5AA_wave3_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave3_run (int p, playergroup target, bool wait) {
    aiABDDC5AA_wave3_runPlayer = p;
    aiABDDC5AA_wave3_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiABDDC5AA_wave3_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiABDDC5AA_wave4_enabled;
wave[17] aiABDDC5AA_wave4_lastWave;
trigger aiABDDC5AA_wave4_trigger = null;
int aiABDDC5AA_wave4_runPlayer;
playergroup aiABDDC5AA_wave4_runTarget;

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave4_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiABDDC5AA_wave4_enabled[init_i] = true;
        aiABDDC5AA_wave4_lastWave[init_i] = null;
    }

    aiABDDC5AA_wave4_trigger = TriggerCreate("aiABDDC5AA_wave4_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave4_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiABDDC5AA_wave4_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiABDDC5AA_wave4_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiABDDC5AA_wave4_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiABDDC5AA_wave4_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiABDDC5AA_wave4_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiABDDC5AA_wave4_runFunc (bool c, bool a) {
    int p = aiABDDC5AA_wave4_runPlayer;
    playergroup target = aiABDDC5AA_wave4_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiABDDC5AA_wave4_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiABDDC5AA_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 40; }
    if (d == 2) { ta = 40; }
    if (d == 3) { ta = 40; }
    if (d == 4) { ta = 40; }
    tg = 0;
    if (d == 1) { tg = 20; }
    if (d == 2) { tg = 20; }
    if (d == 3) { tg = 20; }
    if (d == 4) { tg = 20; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(742529627));

    gatherPoint = aiABDDC5AA_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(7840713), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1782204384), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1026216847), false);
    AIAttackWaveAddWaypoint(p, PointFromId(523340354), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1130016232), false);
    AIAttackWaveAddWaypoint(p, PointFromId(763670744), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1931216631), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1106296665), false);
    AIAttackWaveAddWaypoint(p, PointFromId(775654609), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1616870696), false);
    AIAttackWaveAddWaypoint(p, PointFromId(819192723), false);
    AIAttackWaveAddWaypoint(p, PointFromId(216542348), false);

    AIAttackWaveAddUnits(2, 3, "MarineSCBW");
    AIAttackWaveAddUnits(3, 2, "MarineSCBW");
    AIAttackWaveAddUnits(4, 3, "MarineSCBW");
    AIAttackWaveAddUnits(5, 3, "MarineSCBW");

    AIAttackWaveSend(p, ts, false);
    aiABDDC5AA_wave4_lastWave[p] = WaveLastCreated();
    aiABDDC5AA_lastWave[p] = aiABDDC5AA_wave4_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave4_run (int p, playergroup target, bool wait) {
    aiABDDC5AA_wave4_runPlayer = p;
    aiABDDC5AA_wave4_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiABDDC5AA_wave4_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiABDDC5AA_wave5_enabled;
wave[17] aiABDDC5AA_wave5_lastWave;
trigger aiABDDC5AA_wave5_trigger = null;
int aiABDDC5AA_wave5_runPlayer;
playergroup aiABDDC5AA_wave5_runTarget;

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave5_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiABDDC5AA_wave5_enabled[init_i] = true;
        aiABDDC5AA_wave5_lastWave[init_i] = null;
    }

    aiABDDC5AA_wave5_trigger = TriggerCreate("aiABDDC5AA_wave5_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave5_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiABDDC5AA_wave5_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiABDDC5AA_wave5_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiABDDC5AA_wave5_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiABDDC5AA_wave5_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiABDDC5AA_wave5_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiABDDC5AA_wave5_runFunc (bool c, bool a) {
    int p = aiABDDC5AA_wave5_runPlayer;
    playergroup target = aiABDDC5AA_wave5_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiABDDC5AA_wave5_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiABDDC5AA_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 90; }
    if (d == 2) { ta = 90; }
    if (d == 3) { ta = 90; }
    if (d == 4) { ta = 90; }
    tg = 0;
    if (d == 1) { tg = 20; }
    if (d == 2) { tg = 20; }
    if (d == 3) { tg = 20; }
    if (d == 4) { tg = 20; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(742529627));

    gatherPoint = aiABDDC5AA_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(7840713), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1782204384), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1026216847), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1650014953), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1611703428), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1427492171), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1537740355), false);
    AIAttackWaveAddWaypoint(p, PointFromId(396565395), false);
    AIAttackWaveAddWaypoint(p, PointFromId(465996374), false);
    AIAttackWaveAddWaypoint(p, PointFromId(2063379371), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1957756386), false);
    AIAttackWaveAddWaypoint(p, PointFromId(216542348), false);

    AIAttackWaveAddUnits(2, 2, "VultureSCBW");
    AIAttackWaveAddUnits(3, 2, "VultureSCBW");
    AIAttackWaveAddUnits(4, 2, "VultureSCBW");
    AIAttackWaveAddUnits(5, 2, "VultureSCBW");

    AIAttackWaveSend(p, ts, false);
    aiABDDC5AA_wave5_lastWave[p] = WaveLastCreated();
    aiABDDC5AA_lastWave[p] = aiABDDC5AA_wave5_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave5_run (int p, playergroup target, bool wait) {
    aiABDDC5AA_wave5_runPlayer = p;
    aiABDDC5AA_wave5_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiABDDC5AA_wave5_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiABDDC5AA_wave6_enabled;
wave[17] aiABDDC5AA_wave6_lastWave;
trigger aiABDDC5AA_wave6_trigger = null;
int aiABDDC5AA_wave6_runPlayer;
playergroup aiABDDC5AA_wave6_runTarget;

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave6_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiABDDC5AA_wave6_enabled[init_i] = true;
        aiABDDC5AA_wave6_lastWave[init_i] = null;
    }

    aiABDDC5AA_wave6_trigger = TriggerCreate("aiABDDC5AA_wave6_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave6_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiABDDC5AA_wave6_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiABDDC5AA_wave6_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiABDDC5AA_wave6_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiABDDC5AA_wave6_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiABDDC5AA_wave6_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiABDDC5AA_wave6_runFunc (bool c, bool a) {
    int p = aiABDDC5AA_wave6_runPlayer;
    playergroup target = aiABDDC5AA_wave6_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiABDDC5AA_wave6_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiABDDC5AA_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 40; }
    if (d == 2) { ta = 40; }
    if (d == 3) { ta = 40; }
    if (d == 4) { ta = 40; }
    tg = 0;
    if (d == 1) { tg = 20; }
    if (d == 2) { tg = 20; }
    if (d == 3) { tg = 20; }
    if (d == 4) { tg = 20; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(742529627));

    gatherPoint = aiABDDC5AA_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(7840713), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1782204384), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1026216847), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1650014953), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1611703428), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1427492171), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1537740355), false);
    AIAttackWaveAddWaypoint(p, PointFromId(396565395), false);
    AIAttackWaveAddWaypoint(p, PointFromId(465996374), false);
    AIAttackWaveAddWaypoint(p, PointFromId(2063379371), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1957756386), false);
    AIAttackWaveAddWaypoint(p, PointFromId(216542348), false);

    AIAttackWaveAddUnits(2, 3, "MarineSCBW");
    AIAttackWaveAddUnits(3, 2, "MarineSCBW");
    AIAttackWaveAddUnits(4, 3, "MarineSCBW");
    AIAttackWaveAddUnits(5, 3, "MarineSCBW");

    AIAttackWaveAddUnits(2, 1, "MedicSCBW");
    AIAttackWaveAddUnits(3, 1, "MedicSCBW");
    AIAttackWaveAddUnits(4, 1, "MedicSCBW");
    AIAttackWaveAddUnits(5, 1, "MedicSCBW");

    AIAttackWaveAddUnits(2, 1, "FirebatSCBW");
    AIAttackWaveAddUnits(3, 1, "FirebatSCBW");
    AIAttackWaveAddUnits(4, 1, "FirebatSCBW");
    AIAttackWaveAddUnits(5, 1, "FirebatSCBW");

    AIAttackWaveSend(p, ts, false);
    aiABDDC5AA_wave6_lastWave[p] = WaveLastCreated();
    aiABDDC5AA_lastWave[p] = aiABDDC5AA_wave6_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave6_run (int p, playergroup target, bool wait) {
    aiABDDC5AA_wave6_runPlayer = p;
    aiABDDC5AA_wave6_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiABDDC5AA_wave6_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiABDDC5AA_wave7_enabled;
wave[17] aiABDDC5AA_wave7_lastWave;
trigger aiABDDC5AA_wave7_trigger = null;
int aiABDDC5AA_wave7_runPlayer;
playergroup aiABDDC5AA_wave7_runTarget;

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave7_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiABDDC5AA_wave7_enabled[init_i] = true;
        aiABDDC5AA_wave7_lastWave[init_i] = null;
    }

    aiABDDC5AA_wave7_trigger = TriggerCreate("aiABDDC5AA_wave7_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave7_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiABDDC5AA_wave7_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiABDDC5AA_wave7_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiABDDC5AA_wave7_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiABDDC5AA_wave7_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiABDDC5AA_wave7_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiABDDC5AA_wave7_runFunc (bool c, bool a) {
    int p = aiABDDC5AA_wave7_runPlayer;
    playergroup target = aiABDDC5AA_wave7_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiABDDC5AA_wave7_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiABDDC5AA_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 60; }
    if (d == 2) { ta = 60; }
    if (d == 3) { ta = 60; }
    if (d == 4) { ta = 60; }
    tg = 0;
    if (d == 1) { tg = 20; }
    if (d == 2) { tg = 20; }
    if (d == 3) { tg = 20; }
    if (d == 4) { tg = 20; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(742529627));

    gatherPoint = aiABDDC5AA_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(7840713), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1782204384), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1026216847), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1650014953), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1611703428), false);
    AIAttackWaveAddWaypoint(p, PointFromId(151633690), false);
    AIAttackWaveAddWaypoint(p, PointFromId(759196783), false);
    AIAttackWaveAddWaypoint(p, PointFromId(2063379371), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1957756386), false);
    AIAttackWaveAddWaypoint(p, PointFromId(216542348), false);

    AIAttackWaveAddUnits(2, 2, "MarineSCBW");
    AIAttackWaveAddUnits(3, 2, "MarineSCBW");
    AIAttackWaveAddUnits(4, 2, "MarineSCBW");
    AIAttackWaveAddUnits(5, 2, "MarineSCBW");

    AIAttackWaveAddUnits(2, 2, "VultureSCBW");
    AIAttackWaveAddUnits(3, 2, "VultureSCBW");
    AIAttackWaveAddUnits(4, 2, "VultureSCBW");
    AIAttackWaveAddUnits(5, 2, "VultureSCBW");

    AIAttackWaveSend(p, ts, false);
    aiABDDC5AA_wave7_lastWave[p] = WaveLastCreated();
    aiABDDC5AA_lastWave[p] = aiABDDC5AA_wave7_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave7_run (int p, playergroup target, bool wait) {
    aiABDDC5AA_wave7_runPlayer = p;
    aiABDDC5AA_wave7_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiABDDC5AA_wave7_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiABDDC5AA_wave8_enabled;
wave[17] aiABDDC5AA_wave8_lastWave;
trigger aiABDDC5AA_wave8_trigger = null;
int aiABDDC5AA_wave8_runPlayer;
playergroup aiABDDC5AA_wave8_runTarget;

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave8_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiABDDC5AA_wave8_enabled[init_i] = true;
        aiABDDC5AA_wave8_lastWave[init_i] = null;
    }

    aiABDDC5AA_wave8_trigger = TriggerCreate("aiABDDC5AA_wave8_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave8_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiABDDC5AA_wave8_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiABDDC5AA_wave8_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiABDDC5AA_wave8_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiABDDC5AA_wave8_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiABDDC5AA_wave8_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiABDDC5AA_wave8_runFunc (bool c, bool a) {
    int p = aiABDDC5AA_wave8_runPlayer;
    playergroup target = aiABDDC5AA_wave8_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiABDDC5AA_wave8_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiABDDC5AA_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 70; }
    if (d == 2) { ta = 70; }
    if (d == 3) { ta = 70; }
    if (d == 4) { ta = 70; }
    tg = 0;
    if (d == 1) { tg = 20; }
    if (d == 2) { tg = 20; }
    if (d == 3) { tg = 20; }
    if (d == 4) { tg = 20; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(742529627));

    gatherPoint = aiABDDC5AA_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(7840713), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1782204384), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1026216847), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1650014953), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1611703428), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1427492171), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1537740355), false);
    AIAttackWaveAddWaypoint(p, PointFromId(396565395), false);
    AIAttackWaveAddWaypoint(p, PointFromId(465996374), false);
    AIAttackWaveAddWaypoint(p, PointFromId(2063379371), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1957756386), false);
    AIAttackWaveAddWaypoint(p, PointFromId(216542348), false);

    AIAttackWaveAddUnits(2, 3, "MarineSCBW");
    AIAttackWaveAddUnits(3, 2, "MarineSCBW");
    AIAttackWaveAddUnits(4, 3, "MarineSCBW");
    AIAttackWaveAddUnits(5, 3, "MarineSCBW");

    AIAttackWaveAddUnits(2, 1, "GoliathSCBW");
    AIAttackWaveAddUnits(3, 1, "GoliathSCBW");
    AIAttackWaveAddUnits(4, 1, "GoliathSCBW");
    AIAttackWaveAddUnits(5, 1, "GoliathSCBW");

    AIAttackWaveSend(p, ts, false);
    aiABDDC5AA_wave8_lastWave[p] = WaveLastCreated();
    aiABDDC5AA_lastWave[p] = aiABDDC5AA_wave8_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave8_run (int p, playergroup target, bool wait) {
    aiABDDC5AA_wave8_runPlayer = p;
    aiABDDC5AA_wave8_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiABDDC5AA_wave8_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave: 
//--------------------------------------------------------------------------------------------------
bool[17] aiABDDC5AA_wave9_enabled;
wave[17] aiABDDC5AA_wave9_lastWave;
trigger aiABDDC5AA_wave9_trigger = null;
int aiABDDC5AA_wave9_runPlayer;
playergroup aiABDDC5AA_wave9_runTarget;

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave9_init () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        aiABDDC5AA_wave9_enabled[init_i] = true;
        aiABDDC5AA_wave9_lastWave[init_i] = null;
    }

    aiABDDC5AA_wave9_trigger = TriggerCreate("aiABDDC5AA_wave9_runFunc");
}

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave9_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiABDDC5AA_wave9_enabled[p] = val;
}

//--------------------------------------------------------------------------------------------------
bool aiABDDC5AA_wave9_isEnabled (int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    return aiABDDC5AA_wave9_enabled[p];
}

//--------------------------------------------------------------------------------------------------
wave aiABDDC5AA_wave9_createdWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiABDDC5AA_wave9_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
bool aiABDDC5AA_wave9_runFunc (bool c, bool a) {
    int p = aiABDDC5AA_wave9_runPlayer;
    playergroup target = aiABDDC5AA_wave9_runTarget;
    int d;
    point gatherPoint = null;
    int ta = 0;
    int tg = 0;
    int ts = 0;
    int tf = 0;
    int td = 0;

    if (p < 0 || p >= 16) {
        return false;
    }
    d = PlayerDifficulty(p);
    if (!aiABDDC5AA_wave9_enabled[p]) {
        td = 0;
        if (td > 0) {
            Wait(td, c_timeAI);
        }
        return true;
    }

    aiABDDC5AA_customData[p] = "";

    ta = 0;
    if (d == 1) { ta = 30; }
    if (d == 2) { ta = 30; }
    if (d == 3) { ta = 30; }
    if (d == 4) { ta = 30; }
    tg = 0;
    if (d == 1) { tg = 20; }
    if (d == 2) { tg = 20; }
    if (d == 3) { tg = 20; }
    if (d == 4) { tg = 20; }
    ts = ta;
    if (tg > 0 && tg < ta) {
        Wait(ta - tg, c_timeAI);
        ts = tg;
    }
    AIAttackWaveSetTargetPlayer(p, target);
    AIAttackWaveSetTargetPoint(p, PointFromId(742529627));

    gatherPoint = aiABDDC5AA_defGather[p];
    AIAttackWaveSetGatherPoint(p, gatherPoint);

    AIAttackWaveClearWaypoints(p);
    AIAttackWaveAddWaypoint(p, PointFromId(7840713), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1782204384), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1026216847), false);
    AIAttackWaveAddWaypoint(p, PointFromId(523340354), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1130016232), false);
    AIAttackWaveAddWaypoint(p, PointFromId(763670744), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1931216631), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1106296665), false);
    AIAttackWaveAddWaypoint(p, PointFromId(775654609), false);
    AIAttackWaveAddWaypoint(p, PointFromId(1616870696), false);
    AIAttackWaveAddWaypoint(p, PointFromId(819192723), false);
    AIAttackWaveAddWaypoint(p, PointFromId(216542348), false);

    AIAttackWaveAddUnits(2, 3, "MarineSCBW");
    AIAttackWaveAddUnits(3, 3, "MarineSCBW");
    AIAttackWaveAddUnits(4, 3, "MarineSCBW");
    AIAttackWaveAddUnits(5, 3, "MarineSCBW");

    AIAttackWaveAddUnits(2, 1, "MedicSCBW");
    AIAttackWaveAddUnits(3, 1, "MedicSCBW");
    AIAttackWaveAddUnits(4, 1, "MedicSCBW");
    AIAttackWaveAddUnits(5, 1, "MedicSCBW");

    AIAttackWaveSend(p, ts, false);
    aiABDDC5AA_wave9_lastWave[p] = WaveLastCreated();
    aiABDDC5AA_lastWave[p] = aiABDDC5AA_wave9_lastWave[p];
    Wait(ts, c_timeAI);
    tf = 0;
    if (tf > 0) {
        Wait(tf, c_timeAI);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave9_run (int p, playergroup target, bool wait) {
    aiABDDC5AA_wave9_runPlayer = p;
    aiABDDC5AA_wave9_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiABDDC5AA_wave9_trigger, false, wait);
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Wrappers
//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave_enable (int w, int p, bool val) {
    if (w == 1) { aiABDDC5AA_wave1_enable(p, val); }
    if (w == 2) { aiABDDC5AA_wave2_enable(p, val); }
    if (w == 3) { aiABDDC5AA_wave3_enable(p, val); }
    if (w == 4) { aiABDDC5AA_wave4_enable(p, val); }
    if (w == 5) { aiABDDC5AA_wave5_enable(p, val); }
    if (w == 6) { aiABDDC5AA_wave6_enable(p, val); }
    if (w == 7) { aiABDDC5AA_wave7_enable(p, val); }
    if (w == 8) { aiABDDC5AA_wave8_enable(p, val); }
    if (w == 9) { aiABDDC5AA_wave9_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
bool aiABDDC5AA_wave_isEnabled (int w, int p) {
    if (w == 1) { return aiABDDC5AA_wave1_isEnabled(p); }
    if (w == 2) { return aiABDDC5AA_wave2_isEnabled(p); }
    if (w == 3) { return aiABDDC5AA_wave3_isEnabled(p); }
    if (w == 4) { return aiABDDC5AA_wave4_isEnabled(p); }
    if (w == 5) { return aiABDDC5AA_wave5_isEnabled(p); }
    if (w == 6) { return aiABDDC5AA_wave6_isEnabled(p); }
    if (w == 7) { return aiABDDC5AA_wave7_isEnabled(p); }
    if (w == 8) { return aiABDDC5AA_wave8_isEnabled(p); }
    if (w == 9) { return aiABDDC5AA_wave9_isEnabled(p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup aiABDDC5AA_wave_createdUnits (int w, int p) {
    return null;
}

//--------------------------------------------------------------------------------------------------
wave aiABDDC5AA_wave_createdWave (int w, int p) {
    if (w == 1) { return aiABDDC5AA_wave1_createdWave(p); }
    if (w == 2) { return aiABDDC5AA_wave2_createdWave(p); }
    if (w == 3) { return aiABDDC5AA_wave3_createdWave(p); }
    if (w == 4) { return aiABDDC5AA_wave4_createdWave(p); }
    if (w == 5) { return aiABDDC5AA_wave5_createdWave(p); }
    if (w == 6) { return aiABDDC5AA_wave6_createdWave(p); }
    if (w == 7) { return aiABDDC5AA_wave7_createdWave(p); }
    if (w == 8) { return aiABDDC5AA_wave8_createdWave(p); }
    if (w == 9) { return aiABDDC5AA_wave9_createdWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_wave_run (int w, int p, playergroup target, bool wait) {
    if (w == 1) { aiABDDC5AA_wave1_run(p, target, wait); }
    if (w == 2) { aiABDDC5AA_wave2_run(p, target, wait); }
    if (w == 3) { aiABDDC5AA_wave3_run(p, target, wait); }
    if (w == 4) { aiABDDC5AA_wave4_run(p, target, wait); }
    if (w == 5) { aiABDDC5AA_wave5_run(p, target, wait); }
    if (w == 6) { aiABDDC5AA_wave6_run(p, target, wait); }
    if (w == 7) { aiABDDC5AA_wave7_run(p, target, wait); }
    if (w == 8) { aiABDDC5AA_wave8_run(p, target, wait); }
    if (w == 9) { aiABDDC5AA_wave9_run(p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
// Attack Wave Sequence
//--------------------------------------------------------------------------------------------------
trigger aiABDDC5AA_waves_trigger = null;
int aiABDDC5AA_waves_runPlayer;
playergroup aiABDDC5AA_waves_runTarget;

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_waves_init () {
    aiABDDC5AA_waves_trigger = TriggerCreate("aiABDDC5AA_waves_runFunc");
}

//--------------------------------------------------------------------------------------------------
bool aiABDDC5AA_waves_runFunc (bool c, bool a) {
    int p = aiABDDC5AA_waves_runPlayer;
    playergroup target = aiABDDC5AA_waves_runTarget;

    if (p < 0 || p >= 16) {
        return false;
    }

    aiABDDC5AA_wave1_run(p, target, true);
    aiABDDC5AA_wave2_run(p, target, true);
    aiABDDC5AA_wave3_run(p, target, true);
    aiABDDC5AA_wave4_run(p, target, true);
    aiABDDC5AA_wave5_run(p, target, true);
    aiABDDC5AA_wave6_run(p, target, true);
    aiABDDC5AA_wave7_run(p, target, true);
    aiABDDC5AA_wave8_run(p, target, true);
    aiABDDC5AA_wave9_run(p, target, true);

    while (true) {
        aiABDDC5AA_wave5_run(p, target, true);
        aiABDDC5AA_wave6_run(p, target, true);
        aiABDDC5AA_wave7_run(p, target, true);
        aiABDDC5AA_wave8_run(p, target, true);
        aiABDDC5AA_wave9_run(p, target, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_waves_run (int p, playergroup target) {
    aiABDDC5AA_waves_runPlayer = p;
    aiABDDC5AA_waves_runTarget = PlayerGroupCopy(target);

    TriggerExecute(aiABDDC5AA_waves_trigger, false, false);
}

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }

    aiABDDC5AA_wave1_enable(p, val);
    aiABDDC5AA_wave2_enable(p, val);
    aiABDDC5AA_wave3_enable(p, val);
    aiABDDC5AA_wave4_enable(p, val);
    aiABDDC5AA_wave5_enable(p, val);
    aiABDDC5AA_wave6_enable(p, val);
    aiABDDC5AA_wave7_enable(p, val);
    aiABDDC5AA_wave8_enable(p, val);
    aiABDDC5AA_wave9_enable(p, val);
}

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_waves_stop () {
    TriggerStop(aiABDDC5AA_waves_trigger);

    TriggerStop(aiABDDC5AA_wave1_trigger);
    TriggerStop(aiABDDC5AA_wave2_trigger);
    TriggerStop(aiABDDC5AA_wave3_trigger);
    TriggerStop(aiABDDC5AA_wave4_trigger);
    TriggerStop(aiABDDC5AA_wave5_trigger);
    TriggerStop(aiABDDC5AA_wave6_trigger);
    TriggerStop(aiABDDC5AA_wave7_trigger);
    TriggerStop(aiABDDC5AA_wave8_trigger);
    TriggerStop(aiABDDC5AA_wave9_trigger);
}

//--------------------------------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    aiABDDC5AA_defGather[p] = val;
}

//--------------------------------------------------------------------------------------------------
string aiABDDC5AA_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiABDDC5AA_customData[p];
}

//--------------------------------------------------------------------------------------------------
wave aiABDDC5AA_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    return aiABDDC5AA_lastWave[p];
}

//--------------------------------------------------------------------------------------------------
// Start
//--------------------------------------------------------------------------------------------------
bool aiABDDC5AA_initialized = false;

//--------------------------------------------------------------------------------------------------
void aiABDDC5AA_start (int p) {
    int init_i;

    if (p < 0 || p >= 16) {
        return;
    }
    if (!aiABDDC5AA_initialized) {
        aiABDDC5AA_wave1_init();
        aiABDDC5AA_wave2_init();
        aiABDDC5AA_wave3_init();
        aiABDDC5AA_wave4_init();
        aiABDDC5AA_wave5_init();
        aiABDDC5AA_wave6_init();
        aiABDDC5AA_wave7_init();
        aiABDDC5AA_wave8_init();
        aiABDDC5AA_wave9_init();
        aiABDDC5AA_waves_init();

        for (init_i = 0; init_i <= 16; init_i += 1) {
            aiABDDC5AA_defGather[init_i] = PointFromId(1860721389);
        }

        aiABDDC5AA_initialized = true;
    }

    AICampaignStart(p);
}
